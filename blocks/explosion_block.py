# imports
from blocks.abstract_block import AbtractBlock, abstractmethod
from general.consts_values import Blocks, Color
from general.matrix_of_blocks import Matrix
from typing import List


# explosion block is generated by bomb block, it deals damage to blocks / objects that it covers
class Explosion(AbtractBlock):

    # constructor - explosion are coloured: from RED to YELLOW
    def __init__(self, pos_x: int, pos_y: int):
        super().__init__(pos_x, pos_y, Color.RED, Blocks.EXPLOSION, False)
        self.__def_time_to_live = 30
        self.__time_to_live = self.__def_time_to_live

    # changes color from red to yellow
    @abstractmethod
    def update(self, matrix: Matrix, moveable_objects: List[AbtractBlock]):
        self.color = (self.color[0], min(self.color[1] + int(255 / self.__def_time_to_live), 255), self.color[2])
        self.damage_to_blocks(matrix)
        self.damage_to_objects(moveable_objects)
        self.__time_to_live -= 1
        if self.__time_to_live < 0:
            moveable_objects.remove(self)

    # deals damage to blocks - walls
    def damage_to_blocks(self, matrix: Matrix):
        matrix.set_block_to_background(self.pos_x, self.pos_y)

    # deals damage to objects
    def damage_to_objects(self, moveable_objects: List[AbtractBlock]):
        for objectt in moveable_objects:
            if objectt.pos_x == self.pos_x and objectt.pos_y == self.pos_y and objectt.damageable:
                # destroy players and enemys
                if objectt.block_type == Blocks.ENEMY or objectt.block_type == Blocks.PLAYER:
                    moveable_objects.remove(objectt)
                # if another bomb -> detonate it
                if objectt.block_type == Blocks.BOMB:
                    objectt.timer = 0

    # can move into explosions = gets damage
    @abstractmethod
    def __bool__(self) -> bool:
        return True
